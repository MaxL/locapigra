@mixin std-transition {
  transition: all .35s ease-out;
}

/// Gives a card depth effect.
/// @param {Number} $depth - depth level (between 1 and 5)
/// @link http://www.google.com/design/spec/layout/layout-principles.html#layout-principles-dimensionality Google Design
/// @requires {function} top-shadow
/// @requires {function} bottom-shadow
@mixin card($depth) {
  @if $depth < 1 {
    box-shadow: none;
  } @else if $depth > 5 {
    @warn "Invalid $depth `#{$depth}` for mixin `card`.";
  } @else {
    box-shadow: bottom-shadow($depth), top-shadow($depth);
  }
}

/// Computes a top-shadow for a card effect.
/// @param {Number} $depth - depth level
/// @return {List}
@function top-shadow($depth) {
  $primary-offset: nth(1.5 3 10 14 19, $depth) * 1px;
  $blur: nth(1.5 3 10 14 19, $depth) * 4px;
  $color: rgba(black, nth(.12 .16 .19 .25 .30, $depth));

  @return 0 $primary-offset $blur $color;
}

/// Computes a bottom-shadow for a card effect.
/// @param {Number} $depth - depth level
/// @return {List}
@function bottom-shadow($depth) {
  $primary-offset: nth(1.5 3 6 10 15, $depth) * 1px;
  $blur: nth(1 3 3 5 6, $depth) * 4px;
  $color: rgba(black, nth(.24 .23 .23 .22 .22, $depth));

  @return 0 $primary-offset $blur $color;
}

@mixin box_sizing {
  -moz-box-sizing:    border-box;
  -webkit-box-sizing: border-box;
  box-sizing:         border-box;
}

// Sass Mixin
// Named Breakpoints are phone, tablet-portrait, tablet-landscape-desktop, large-desktop, non-retina, retina
@mixin respond-to($media) {
  /* portrait phones and down */
  @if $media == xxs {
      @media (max-width: 520px) { @content; }
  }
  /* Landscape phones and down */
  @if $media == xs {
      @media (max-width: 767px) { @content; }
  }
  /* Landscape phone to portrait tablet */
  @else if $media == sm {
      @media (min-width: 768px) and (max-width: 991px) {@content; }
  }
  /* Portrait tablet to landscape and desktop */
  @else if $media == md {
      @media (min-width: 992px) and (max-width: 1199px) { @content; }
  }
  /* desktop and large desktop */
  @else if $media == lg {
      @media (min-width: 1200px) { @content; }
  }
  @else if $media == larger_than_sm {
      @media (min-width: 768px) {@content; }
  }
}

@mixin respondto($media...) {
    @each $mediatype in $media {
        @include respond-to($mediatype) {@content;}
    }
}

@mixin background-gradient($orientation) {
  background: linear-gradient(to $orientation, $swamp 0%, $swamp-light 100%);
}

@mixin background-gradient-light($orientation) {
  background: linear-gradient(to $orientation, $swamp 40%, lighten($swamp-light, 5) 100%);
}

@mixin gradient-border($primary-color, $white-color, $width) {
  box-sizing: border-box;
  position: relative;
  border-left: $width solid $primary-color;
  border-right: $width solid $white-color;
  background-position: 0 0, 0 100% ;
  background-repeat: no-repeat;
  -webkit-background-size: 100% $width;
  -moz-background-size: 100% $width;
  background-size: 100% $width;
  background-image: linear-gradient(to right, $primary-color 0%, $white-color 100%), linear-gradient(to right, $primary-color 0%, $white-color 100%);
}

